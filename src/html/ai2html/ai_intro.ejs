
<!-- Generated by ai2html v0.100.0 - 2021-02-01 10:19 -->
<!-- ai file: ai_intro.ai -->
<style media="screen,print">
	#g-ai_intro-box ,
	#g-ai_intro-box .g-artboard {
		margin:0 auto;
	}
	#g-ai_intro-box p {
		margin:0;
	}
	#g-ai_intro-box .g-aiAbs {
		position:absolute;
	}
	#g-ai_intro-box .g-aiImg {
		position:absolute;
		top:0;
		display:block;
		width:100% !important;
		height: 100%;
		background-size: cover;
		background-repeat: no-repeat;
	}
	#g-ai_intro-box .g-aiSymbol {
		position: absolute;
		box-sizing: border-box;
	}
	#g-ai_intro-box .g-aiPointText p { white-space: nowrap; }
	#g-ai_intro-sm {
		position:relative;
		overflow:hidden;
	}
	#g-ai_intro-sm p {
		font-family:"Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif;
		font-weight:300;
		line-height:16px;
		height:auto;
		filter:alpha(opacity=100);
		-ms-filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=100);
		opacity:1;
		letter-spacing:0em;
		font-size:14px;
		text-align:left;
		color:rgb(0,0,0);
		text-transform:none;
		padding-bottom:0;
		padding-top:0;
		mix-blend-mode:normal;
		font-style:normal;
		position:static;
	}
	#g-ai_intro-sm .g-pstyle0 {
		font-weight:600;
		line-height:19px;
		height:19px;
		font-size:16px;
	}
	#g-ai_intro-sm .g-pstyle1 {
		height:16px;
		text-align:center;
	}
	#g-ai_intro-sm .g-pstyle2 {
		line-height:19px;
		height:19px;
		font-size:16px;
		text-align:center;
	}
	#g-ai_intro-sm .g-cstyle0 {
		font-weight:300;
	}
	#g-ai_intro-xs {
		position:relative;
		overflow:hidden;
	}
	#g-ai_intro-xs p {
		font-family:"Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif;
		font-weight:300;
		line-height:16px;
		height:auto;
		filter:alpha(opacity=100);
		-ms-filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=100);
		opacity:1;
		letter-spacing:0em;
		font-size:14px;
		text-align:left;
		color:rgb(0,0,0);
		text-transform:none;
		padding-bottom:0;
		padding-top:0;
		mix-blend-mode:normal;
		font-style:normal;
		position:static;
	}
	#g-ai_intro-xs .g-pstyle0 {
		font-weight:600;
		line-height:19px;
		height:19px;
		font-size:16px;
	}
	#g-ai_intro-xs .g-pstyle1 {
		line-height:19px;
		height:19px;
		font-size:16px;
		text-align:center;
	}
	#g-ai_intro-xs .g-pstyle2 {
		height:16px;
		text-align:center;
	}
	#g-ai_intro-xs .g-cstyle0 {
		font-weight:300;
	}

	/* Custom CSS */


</style>

<div id="g-ai_intro-box" class="ai2html">

	<!-- Artboard: sm -->
	<div id="g-ai_intro-sm" class="g-artboard" style="" data-aspect-ratio="2.598" data-min-width="400">
<div style="padding: 0 0 38.4953% 0;"></div>
		<div id="g-ai_intro-sm-img" class="g-aiImg" alt="" style="background-image: url(img/graphics/ai_intro-sm.png);"></div>		<div id="g-ai0-1" class="g-art g-aiAbs g-aiPointText" style="top:18.8102%;margin-top:-11px;left:39.8191%;width:237px;">
			<p class="g-pstyle0"><%= gt.gettext("Gates are designated by colour")%><span class="g-cstyle0"><%= gt.gettext(":")%></span></p>
		</div>
		<div id="g-ai0-2" class="g-art g-aiAbs g-aiPointText" style="top:66.7692%;margin-top:-32.8px;left:18.7388%;margin-left:-47px;width:94px;">
			<p class="g-pstyle1"><%= gt.gettext("Diagonal bar")%></p>
			<p class="g-pstyle1"><%= gt.gettext("indicates")%></p>
			<p class="g-pstyle1"><%= gt.gettext("wrong")%></p>
			<p class="g-pstyle1"><%= gt.gettext("direction")%></p>
		</div>
		<div id="g-ai0-3" class="g-art g-aiAbs g-aiPointText" style="top:73.0139%;margin-top:-10.4px;left:50.5068%;margin-left:-52px;width:104px;">
			<p class="g-pstyle2"><%= gt.gettext("Downstream")%></p>
		</div>
		<div id="g-ai0-4" class="g-art g-aiAbs g-aiPointText" style="top:73.0139%;margin-top:-10.4px;left:72.8784%;margin-left:-43px;width:86px;">
			<p class="g-pstyle2"><%= gt.gettext("Upstream")%></p>
		</div>
	</div>

	<!-- Artboard: xs -->
	<div id="g-ai_intro-xs" class="g-artboard" style="max-width: 399px;max-height: 352px" data-aspect-ratio="1.134" data-min-width="0" data-max-width="399">
<div style="padding: 0 0 88.1686% 0;"></div>
		<div id="g-ai_intro-xs-img" class="g-aiImg" alt="" style="background-image: url(img/graphics/ai_intro-xs.png);"></div>		<div id="g-ai1-1" class="g-art g-aiAbs g-aiPointText" style="top:7.2052%;margin-top:-11px;left:15.1738%;width:237px;">
			<p class="g-pstyle0"><%= gt.gettext("Gates are designated by colour")%><span class="g-cstyle0"><%= gt.gettext(":")%></span></p>
		</div>
		<div id="g-ai1-2" class="g-art g-aiAbs g-aiPointText" style="top:35.8912%;margin-top:-10.4px;left:35.6427%;margin-left:-52px;width:104px;">
			<p class="g-pstyle1"><%= gt.gettext("Downstream")%></p>
		</div>
		<div id="g-ai1-3" class="g-art g-aiAbs g-aiPointText" style="top:35.8912%;margin-top:-10.4px;left:62.7598%;margin-left:-43px;width:86px;">
			<p class="g-pstyle1"><%= gt.gettext("Upstream")%></p>
		</div>
		<div id="g-ai1-4" class="g-art g-aiAbs g-aiPointText" style="top:81.0472%;margin-top:-32.8px;left:47.7509%;margin-left:-47px;width:94px;">
			<p class="g-pstyle2"><%= gt.gettext("Diagonal bar")%></p>
			<p class="g-pstyle2"><%= gt.gettext("indicates")%></p>
			<p class="g-pstyle2"><%= gt.gettext("wrong")%></p>
			<p class="g-pstyle2"><%= gt.gettext("direction")%></p>
		</div>
	</div>

</div>

<script type="text/javascript">
	(function (containerId, opts) {
			if (!('querySelector' in document)) return;
			var container = document.getElementById(containerId);
			var nameSpace = opts.namespace || '';
			var onResize = throttle(update, 200);
			var waiting = !!window.IntersectionObserver;
			var observer;
			update();
	
			document.addEventListener('DOMContentLoaded', update);
			window.addEventListener('resize', onResize);
	
			// NYT Scoop-specific code
			if (opts.setup) {
				opts.setup(container).on('cleanup', cleanup);
			}
	
			function cleanup() {
				document.removeEventListener('DOMContentLoaded', update);
				window.removeEventListener('resize', onResize);
				if (observer) observer.disconnect();
			}
	
			function update() {
				var artboards = selectChildren('.' + nameSpace + 'artboard[data-min-width]', container),
						width = Math.round(container.getBoundingClientRect().width);
	
				// Set artboard visibility based on container width
				artboards.forEach(function(el) {
					var minwidth = el.getAttribute('data-min-width'),
							maxwidth = el.getAttribute('data-max-width');
					if (+minwidth <= width && (+maxwidth >= width || maxwidth === null)) {
						if (!waiting) {
							selectChildren('.' + nameSpace + 'aiImg', el).forEach(updateImgSrc);
						}
						el.style.display = 'block';
					} else {
						el.style.display = 'none';
					}
				});
	
				// Initialize lazy loading on first call
				if (waiting && !observer) {
					if (elementInView(container)) {
						waiting = false;
						update();
					} else {
						observer = new IntersectionObserver(onIntersectionChange, {});
						observer.observe(container);
					}
				}
			}
	
			function elementInView(el) {
				var bounds = el.getBoundingClientRect();
				return bounds.top < window.innerHeight && bounds.bottom > 0;
			}
	
			// Replace blank placeholder image with actual image
			function updateImgSrc(img) {
				var src = img.getAttribute('data-src');
				if (src && img.getAttribute('src') != src) {
					img.setAttribute('src', src);
				}
			}
	
			function onIntersectionChange(entries) {
				// There may be multiple entries relating to the same container
				// (captured at different times)
				var isIntersecting = entries.reduce(function(memo, entry) {
					return memo || entry.isIntersecting;
				}, false);
				if (isIntersecting) {
					waiting = false;
					// update: don't remove -- we need the observer to trigger an update
					// when a hidden map becomes visible after user interaction
					// (e.g. when an accordion menu or tab opens)
					// observer.disconnect();
					// observer = null;
					update();
				}
			}
	
			function selectChildren(selector, parent) {
				return parent ? Array.prototype.slice.call(parent.querySelectorAll(selector)) : [];
			}
	
			// based on underscore.js
			function throttle(func, wait) {
				var timeout = null, previous = 0;
				function run() {
						previous = Date.now();
						timeout = null;
						func();
				}
				return function() {
					var remaining = wait - (Date.now() - previous);
					if (remaining <= 0 || remaining > wait) {
						clearTimeout(timeout);
						run();
					} else if (!timeout) {
						timeout = setTimeout(run, remaining);
					}
				};
			}
		})("g-ai_intro-box", {namespace: "g-", setup: window.setupInteractive || window.getComponent});
</script>
<!-- End ai2html - 2021-02-01 10:19 -->
